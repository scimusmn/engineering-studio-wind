// $Id$/*// Usage:import org.smm.attract.attractTimer;// Create Timeoutvar quizTimeout:AttractTimer = new AttractTimer(180 * 1000);// Attract screen timer// Checks to see if the timeout interval has been reached// If so, sends the playhead to the attract loopfunction checkTimeout (event:Event):void {  if (quizTimeout.p_intervalComplete == true) {    SoundMixer.stopAll();    quiz_mc.gotoAndStop ("attract");    quiz_mc.removeEventListener (Event.ENTER_FRAME, checkTimeout);  }}// To reset the timeout objectquizTimeout.p_lastInterval = getTimer();// Assign timeout listenersquiz_mc.addEventListener (Event.ENTER_FRAME, quizTimeout.checkTime);quiz_mc.addEventListener (Event.ENTER_FRAME, checkTimeout);*/package classes {  import flash.utils.getTimer;  import flash.events.Event;  public class AttractTimer {    private var delay:Number;    private var currentTime:Number;    private var lastInterval:Number;    private var intervalComplete:Boolean;    public function AttractTimer (myDelay:Number):void {      delay = myDelay;      currentTime;      lastInterval = getTimer();      intervalComplete = false;    }        // Attract loop timer    public function checkTime (event:Event):void {      currentTime = getTimer();      if ((currentTime - lastInterval) > delay) {        trace ("Time's Up!");        intervalComplete = true;      }    }        // Property access    public function get p_lastInterval ():Number {      return lastInterval;    }        public function set p_lastInterval (setValue:Number):void {      lastInterval = setValue;    }        public function get p_intervalComplete ():Boolean {      return intervalComplete;    }        public function set p_intervalComplete (setValue:Boolean):void {      intervalComplete = setValue;    }        public function get p_delay ():Number {      return delay;    }		public function set p_delay(setValue:Number):void {		trace("set to " + setValue);		delay=setValue;	}        public function get p_currentTime ():uint {      return currentTime;    }  }}